%% Creating the Environment
% use rlFunctionEnv
% Syntax: env = rlFunctionEnv(observationInfo,actionInfo,stepFcn,resetFcn)

%% Observation Information (ObsInfo)
% CB settings
CB_setts = [];% vector of size (k*2) where k is the number CBs, colomn 1 has the CB IDs and colomn 2 has he short time 
%               delay setting (t2)
NumCBs = length(CB_settings.CB);
for k = 1:NumCBs
    CB_setts(k,1) = CB_settings.CB{1,k}.CB_ID; % extracting the CB ID to colomn 1
    CB_setts(k,2) = CB_settings.CB{1,k}.t2; % extracting the short time delay setting (t2) to colomn 2
end
% Verification results
WrongCBs = []; % vector of CB IDs with misconfigurations
NumWrongCBs = length(WrongCBs); % Number of CBs with misconfigurations
selectivity = false; % A boolean variable that turns true if the verification results in selectivity with no 
                     % misconfigurations


ObsInfo = [ rlFiniteSetSpec(1:20)       % The time delay observation
            rlNumericSpec([NumCBs,1])   % The number of wrong CBs observation
            rlFiniteSetSpec([1 0])      % The selectivity achieved or not observation
          ];
ObsInfo(1).Name = "Time_Delay";
ObsInfo(1).Description = "The short time delay settings";

ObsInfo(2).Name = "Wrong_CBs";
ObsInfo(2).Description = "IDs of CBs with misconfigurations";
ObsInfo(2).LowerLimit = 0;

ObsInfo(3).Name = "Selectivity_Index";
ObsInfo(3).Description = "A boolean variable indicating wether selectivity was achieved or not";



%% Action Information (ActInfo)
ActInfo = rlFiniteSetSpec(1:20);
ActInfo.Name = "t2 settings";

%% StepFcn
% Input 1: Action (Current action from the agent, which must match the dimensions and data type specified in actionInfo).

% Input 2: Info (Any data that you want to pass from one step to the next. This can be the environment state or a 
%                structure containing state and parameters. The simulation or training functions (train or sim) 
%                handle this variable by:
%                1- Initializing Info using the second output argument returned by ResetFcn, at the beginning of the 
%                   episode.
%                2- Passing Info as second input argument to StepFcn at each training or simulation step.
%                3- Updating Info using the fourth output argument returned by StepFcn, UpdatedInfo).



% Output 1: Next Observation (This is the observation generated by the transition, caused by Action, from the current 
%                             state to the next one. The returned value must match the dimensions and data types 
%                             specified in observationInfo).

% Output 2: Reward (Reward generated by the transition, caused by Action, from the current state to the next one. 
%                   The returned value must be a scalar).

% Output 3: Isdone? (Logical value indicating whether to end the simulation or training episode).

% Output 4: UpdatedInfo


%% ResetFcn
% Environment reset function, specified as a function name, function handle, or handle to an anonymous function. 
% The sim function calls your reset function to reset the environment at the start of each simulation, and the train 
% function calls it at the start of each training episode.
% The reset function that you provide must have no inputs and two outputs, as illustrated by the following signature.
% [InitialObservation,Info] = myResetFunction
% The reset function sets the environment to an initial state and computes the initial value of the observation. 
% For example, you can create a reset function that randomizes certain state values, such that each training episode 
% begins from different initial conditions. The InitialObservation output must match the dimensions and data type of 
% observationInfo.
% The Info output of ResetFcn initializes the Info property of your environment and contains any data that you want 
% to pass from one step to the next. This can be the environment state or a structure containing state and parameters.
% The simulation or training function (train or sim) supplies the current value of Info as the second input argument 
% of StepFcn, then uses the fourth output argument returned by StepFcn to update the value of Info.
% To use additional input arguments beyond the allowed two, define your argument in the MATLAB workspace, then 
% specify stepFcn as an anonymous function that in turn calls your custom function with the additional arguments 
% defined in the workspace, as shown in the example Create Custom Environment Using Step and Reset Functions.


% Output 1: Intial Observation
% Output 2: Info