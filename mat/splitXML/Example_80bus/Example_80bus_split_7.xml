<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
<declaration>
broadcast chan L1_fault, L2_fault, L3_fault, L5_fault, L6_fault, L8_fault, L9_fault, L10_fault, L11_fault, L12_fault, L13_fault, L14_fault, L15_fault, L16_fault, L17_fault, L18_fault, L19_fault, L20_fault, L21_fault, L22_fault, L23_fault, L24_fault, L25_fault, L26_fault, L27_fault, L28_fault, L29_fault, L30_fault, L31_fault, L32_fault, L33_fault, L34_fault, L35_fault, L36_fault, L37_fault, L38_fault, L39_fault, L40_fault, L41_fault, L42_fault, L43_fault, L44_fault, L45_fault, L46_fault, L47_fault, L48_fault, L49_fault, L50_fault, L51_fault, L52_fault, L53_fault, L54_fault, L55_fault, L56_fault, L57_fault, L58_fault, L59_fault, L60_fault, L61_fault, L62_fault, L63_fault, L64_fault, L65_fault, L66_fault, L67_fault, L68_fault, L69_fault, L70_fault, L71_fault, L72_fault, L73_fault, L74_fault, L75_fault, L76_fault, L77_fault, L78_fault, L79_fault, L80_fault, L81_fault, L82_fault, L83_fault;
broadcast chan LB1_fault, LB2_fault, LB3_fault, LB4_fault, LB5_fault, LB6_fault, LB8_fault, LB9_fault, LB10_fault, LB11_fault, LB12_fault, LB13_fault, LB14_fault, LB15_fault, LB16_fault, LB17_fault, LB18_fault, LB19_fault, LB20_fault, LB21_fault, LB22_fault, LB23_fault, LB24_fault, LB25_fault, LB26_fault, LB27_fault, LB28_fault, LB29_fault, LB30_fault, LB31_fault, LB32_fault, LB33_fault, LB34_fault, LB35_fault, LB36_fault, LB37_fault, LB38_fault, LB39_fault, LB40_fault, LB41_fault, LB42_fault, LB43_fault, LB44_fault, LB45_fault, LB46_fault, LB47_fault, LB48_fault, LB49_fault, LB50_fault, LB51_fault, LB52_fault, LB53_fault, LB54_fault, LB55_fault, LB56_fault, LB57_fault, LB58_fault, LB59_fault, LB60_fault, LB61_fault, LB62_fault, LB63_fault, LB64_fault, LB65_fault, LB66_fault, LB67_fault, LB68_fault, LB69_fault, LB70_fault, LB71_fault, LB72_fault, LB73_fault, LB74_fault, LB75_fault, LB76_fault, LB77_fault, LB78_fault, LB79_fault, LB80_fault, LB81_fault, LB82_fault, LB83_fault;
broadcast chan CBopen, Faults, Reset, Fault_cleared, Close;

int Iioc_1 = 20;
int Iioc_2 = 17;
int Iioc_3 = 17;
int Iioc_5 = 54;
int Iioc_6 = 20;
int Iioc_8 = 1072;
int Iioc_9 = 20;
int Iioc_10 = 20;
int Iioc_11 = 20;
int Iioc_12 = 40;
int Iioc_13 = 60;
int Iioc_14 = 20;
int Iioc_15 = 17;
int Iioc_16 = 17;
int Iioc_17 = 54;
int Iioc_18 = 20;
int Iioc_19 = 20;
int Iioc_20 = 20;
int Iioc_21 = 20;
int Iioc_22 = 40;
int Iioc_23 = 60;
int Iioc_24 = 20;
int Iioc_25 = 17;
int Iioc_26 = 17;
int Iioc_27 = 54;
int Iioc_28 = 20;
int Iioc_29 = 20;
int Iioc_30 = 20;
int Iioc_31 = 20;
int Iioc_32 = 40;
int Iioc_33 = 60;
int Iioc_34 = 20;
int Iioc_35 = 17;
int Iioc_36 = 17;
int Iioc_37 = 54;
int Iioc_38 = 20;
int Iioc_39 = 20;
int Iioc_40 = 20;
int Iioc_41 = 20;
int Iioc_42 = 40;
int Iioc_43 = 60;
int Iioc_44 = 20;
int Iioc_45 = 17;
int Iioc_46 = 17;
int Iioc_47 = 54;
int Iioc_48 = 20;
int Iioc_49 = 20;
int Iioc_50 = 20;
int Iioc_51 = 20;
int Iioc_52 = 40;
int Iioc_53 = 60;
int Iioc_54 = 20;
int Iioc_55 = 17;
int Iioc_56 = 17;
int Iioc_57 = 54;
int Iioc_58 = 20;
int Iioc_59 = 20;
int Iioc_60 = 20;
int Iioc_61 = 20;
int Iioc_62 = 40;
int Iioc_63 = 60;
int Iioc_64 = 20;
int Iioc_65 = 17;
int Iioc_66 = 17;
int Iioc_67 = 54;
int Iioc_68 = 20;
int Iioc_69 = 20;
int Iioc_70 = 20;
int Iioc_71 = 20;
int Iioc_72 = 40;
int Iioc_73 = 60;
int Iioc_74 = 20;
int Iioc_75 = 17;
int Iioc_76 = 17;
int Iioc_77 = 54;
int Iioc_78 = 20;
int Iioc_79 = 20;
int Iioc_80 = 20;
int Iioc_81 = 20;
int Iioc_82 = 40;
int Iioc_83 = 60;

int Ith_1 = 25;
int Ith_2 = 25;
int Ith_3 = 25;
int Ith_5 = 63;
int Ith_6 = 25;
int Ith_8 = 1180;
int Ith_9 = 25;
int Ith_10 = 25;
int Ith_11 = 25;
int Ith_12 = 50;
int Ith_13 = 75;
int Ith_14 = 25;
int Ith_15 = 25;
int Ith_16 = 25;
int Ith_17 = 63;
int Ith_18 = 25;
int Ith_19 = 25;
int Ith_20 = 25;
int Ith_21 = 25;
int Ith_22 = 50;
int Ith_23 = 75;
int Ith_24 = 25;
int Ith_25 = 25;
int Ith_26 = 25;
int Ith_27 = 63;
int Ith_28 = 25;
int Ith_29 = 25;
int Ith_30 = 25;
int Ith_31 = 25;
int Ith_32 = 50;
int Ith_33 = 75;
int Ith_34 = 25;
int Ith_35 = 25;
int Ith_36 = 25;
int Ith_37 = 63;
int Ith_38 = 25;
int Ith_39 = 25;
int Ith_40 = 25;
int Ith_41 = 25;
int Ith_42 = 50;
int Ith_43 = 75;
int Ith_44 = 25;
int Ith_45 = 25;
int Ith_46 = 25;
int Ith_47 = 63;
int Ith_48 = 25;
int Ith_49 = 25;
int Ith_50 = 25;
int Ith_51 = 25;
int Ith_52 = 50;
int Ith_53 = 75;
int Ith_54 = 25;
int Ith_55 = 25;
int Ith_56 = 25;
int Ith_57 = 63;
int Ith_58 = 25;
int Ith_59 = 25;
int Ith_60 = 25;
int Ith_61 = 25;
int Ith_62 = 50;
int Ith_63 = 75;
int Ith_64 = 25;
int Ith_65 = 25;
int Ith_66 = 25;
int Ith_67 = 63;
int Ith_68 = 25;
int Ith_69 = 25;
int Ith_70 = 25;
int Ith_71 = 25;
int Ith_72 = 50;
int Ith_73 = 75;
int Ith_74 = 25;
int Ith_75 = 25;
int Ith_76 = 25;
int Ith_77 = 63;
int Ith_78 = 25;
int Ith_79 = 25;
int Ith_80 = 25;
int Ith_81 = 25;
int Ith_82 = 50;
int Ith_83 = 75;

int Isc_8_1 = 5500;
int Isc_8_2 = 5500;
int Isc_8_3 = 5500;
int Isc_8_5 = 7400;
int Isc_8_6 = 7400;
int Isc_8_8 = 0;
int Isc_8_9 = 5500;
int Isc_8_10 = 5500;
int Isc_8_11 = 5500;
int Isc_8_12 = 5500;
int Isc_8_13 = 7400;
int Isc_8_14 = 7400;
int Isc_8_15 = 7400;
int Isc_8_16 = 7400;
int Isc_8_17 = 9500;
int Isc_8_18 = 9500;
int Isc_8_19 = 9500;
int Isc_8_20 = 9500;
int Isc_8_21 = 7400;
int Isc_8_22 = 5500;
int Isc_8_23 = 7400;
int Isc_8_24 = 5500;
int Isc_8_25 = 5500;
int Isc_8_26 = 5500;
int Isc_8_27 = 7400;
int Isc_8_28 = 7400;
int Isc_8_29 = 5500;
int Isc_8_30 = 5500;
int Isc_8_31 = 5500;
int Isc_8_32 = 5500;
int Isc_8_33 = 7400;
int Isc_8_34 = 5500;
int Isc_8_35 = 5500;
int Isc_8_36 = 5500;
int Isc_8_37 = 7400;
int Isc_8_38 = 7400;
int Isc_8_39 = 5500;
int Isc_8_40 = 5500;
int Isc_8_41 = 5500;
int Isc_8_42 = 5500;
int Isc_8_43 = 7400;
int Isc_8_44 = 5500;
int Isc_8_45 = 5500;
int Isc_8_46 = 5500;
int Isc_8_47 = 7400;
int Isc_8_48 = 7400;
int Isc_8_49 = 5500;
int Isc_8_50 = 5500;
int Isc_8_51 = 5500;
int Isc_8_52 = 5500;
int Isc_8_53 = 7400;
int Isc_8_54 = 5500;
int Isc_8_55 = 5500;
int Isc_8_56 = 5500;
int Isc_8_57 = 7400;
int Isc_8_58 = 7400;
int Isc_8_59 = 5500;
int Isc_8_60 = 5500;
int Isc_8_61 = 5500;
int Isc_8_62 = 5500;
int Isc_8_63 = 7400;
int Isc_8_64 = 5500;
int Isc_8_65 = 5500;
int Isc_8_66 = 5500;
int Isc_8_67 = 7400;
int Isc_8_68 = 7400;
int Isc_8_69 = 5500;
int Isc_8_70 = 5500;
int Isc_8_71 = 5500;
int Isc_8_72 = 5500;
int Isc_8_73 = 7400;
int Isc_8_74 = 5500;
int Isc_8_75 = 5500;
int Isc_8_76 = 5500;
int Isc_8_77 = 7400;
int Isc_8_78 = 7400;
int Isc_8_79 = 5500;
int Isc_8_80 = 5500;
int Isc_8_81 = 5500;
int Isc_8_82 = 5500;
int Isc_8_83 = 7400;

int Iscb_8_1 = 5500;
int Iscb_8_2 = 5500;
int Iscb_8_3 = 5500;
int Iscb_8_4 = 7400;
int Iscb_8_5 = 9500;
int Iscb_8_6 = 7400;
int Iscb_8_8 = 0;
int Iscb_8_9 = 5500;
int Iscb_8_10 = 5500;
int Iscb_8_11 = 5500;
int Iscb_8_12 = 5500;
int Iscb_8_13 = 7400;
int Iscb_8_14 = 7400;
int Iscb_8_15 = 7400;
int Iscb_8_16 = 7400;
int Iscb_8_17 = 9500;
int Iscb_8_18 = 9500;
int Iscb_8_19 = 9500;
int Iscb_8_20 = 9500;
int Iscb_8_21 = 7400;
int Iscb_8_22 = 5500;
int Iscb_8_23 = 7400;
int Iscb_8_24 = 5500;
int Iscb_8_25 = 5500;
int Iscb_8_26 = 5500;
int Iscb_8_27 = 7400;
int Iscb_8_28 = 7400;
int Iscb_8_29 = 5500;
int Iscb_8_30 = 5500;
int Iscb_8_31 = 5500;
int Iscb_8_32 = 5500;
int Iscb_8_33 = 7400;
int Iscb_8_34 = 5500;
int Iscb_8_35 = 5500;
int Iscb_8_36 = 5500;
int Iscb_8_37 = 7400;
int Iscb_8_38 = 7400;
int Iscb_8_39 = 5500;
int Iscb_8_40 = 5500;
int Iscb_8_41 = 5500;
int Iscb_8_42 = 5500;
int Iscb_8_43 = 7400;
int Iscb_8_44 = 5500;
int Iscb_8_45 = 5500;
int Iscb_8_46 = 5500;
int Iscb_8_47 = 7400;
int Iscb_8_48 = 7400;
int Iscb_8_49 = 5500;
int Iscb_8_50 = 5500;
int Iscb_8_51 = 5500;
int Iscb_8_52 = 5500;
int Iscb_8_53 = 7400;
int Iscb_8_54 = 5500;
int Iscb_8_55 = 5500;
int Iscb_8_56 = 5500;
int Iscb_8_57 = 7400;
int Iscb_8_58 = 7400;
int Iscb_8_59 = 5500;
int Iscb_8_60 = 5500;
int Iscb_8_61 = 5500;
int Iscb_8_62 = 5500;
int Iscb_8_63 = 7400;
int Iscb_8_64 = 5500;
int Iscb_8_65 = 5500;
int Iscb_8_66 = 5500;
int Iscb_8_67 = 7400;
int Iscb_8_68 = 7400;
int Iscb_8_69 = 5500;
int Iscb_8_70 = 5500;
int Iscb_8_71 = 5500;
int Iscb_8_72 = 5500;
int Iscb_8_73 = 7400;
int Iscb_8_74 = 5500;
int Iscb_8_75 = 5500;
int Iscb_8_76 = 5500;
int Iscb_8_77 = 7400;
int Iscb_8_78 = 7400;
int Iscb_8_79 = 5500;
int Iscb_8_80 = 5500;
int Iscb_8_81 = 5500;
int Iscb_8_82 = 5500;
int Iscb_8_83 = 7400;

int Irc_1 = 20;
int Irc_2 = 17;
int Irc_3 = 17;
int Irc_5 = 54;
int Irc_6 = 20;
int Irc_8 = 1072;
int Irc_9 = 20;
int Irc_10 = 20;
int Irc_11 = 20;
int Irc_12 = 40;
int Irc_13 = 60;
int Irc_14 = 20;
int Irc_15 = 17;
int Irc_16 = 17;
int Irc_17 = 54;
int Irc_18 = 20;
int Irc_19 = 20;
int Irc_20 = 20;
int Irc_21 = 20;
int Irc_22 = 40;
int Irc_23 = 60;
int Irc_24 = 20;
int Irc_25 = 17;
int Irc_26 = 17;
int Irc_27 = 54;
int Irc_28 = 20;
int Irc_29 = 20;
int Irc_30 = 20;
int Irc_31 = 20;
int Irc_32 = 40;
int Irc_33 = 60;
int Irc_34 = 20;
int Irc_35 = 17;
int Irc_36 = 17;
int Irc_37 = 54;
int Irc_38 = 20;
int Irc_39 = 20;
int Irc_40 = 20;
int Irc_41 = 20;
int Irc_42 = 40;
int Irc_43 = 60;
int Irc_44 = 20;
int Irc_45 = 17;
int Irc_46 = 17;
int Irc_47 = 54;
int Irc_48 = 20;
int Irc_49 = 20;
int Irc_50 = 20;
int Irc_51 = 20;
int Irc_52 = 40;
int Irc_53 = 60;
int Irc_54 = 20;
int Irc_55 = 17;
int Irc_56 = 17;
int Irc_57 = 54;
int Irc_58 = 20;
int Irc_59 = 20;
int Irc_60 = 20;
int Irc_61 = 20;
int Irc_62 = 40;
int Irc_63 = 60;
int Irc_64 = 20;
int Irc_65 = 17;
int Irc_66 = 17;
int Irc_67 = 54;
int Irc_68 = 20;
int Irc_69 = 20;
int Irc_70 = 20;
int Irc_71 = 20;
int Irc_72 = 40;
int Irc_73 = 60;
int Irc_74 = 20;
int Irc_75 = 17;
int Irc_76 = 17;
int Irc_77 = 54;
int Irc_78 = 20;
int Irc_79 = 20;
int Irc_80 = 20;
int Irc_81 = 20;
int Irc_82 = 40;
int Irc_83 = 60;

bool F1 = false;
bool F2 = false;
bool F3 = false;
bool F5 = false;
bool F6 = false;
bool F8 = false;
bool F9 = false;
bool F10 = false;
bool F11 = false;
bool F12 = false;
bool F13 = false;
bool F14 = false;
bool F15 = false;
bool F16 = false;
bool F17 = false;
bool F18 = false;
bool F19 = false;
bool F20 = false;
bool F21 = false;
bool F22 = false;
bool F23 = false;
bool F24 = false;
bool F25 = false;
bool F26 = false;
bool F27 = false;
bool F28 = false;
bool F29 = false;
bool F30 = false;
bool F31 = false;
bool F32 = false;
bool F33 = false;
bool F34 = false;
bool F35 = false;
bool F36 = false;
bool F37 = false;
bool F38 = false;
bool F39 = false;
bool F40 = false;
bool F41 = false;
bool F42 = false;
bool F43 = false;
bool F44 = false;
bool F45 = false;
bool F46 = false;
bool F47 = false;
bool F48 = false;
bool F49 = false;
bool F50 = false;
bool F51 = false;
bool F52 = false;
bool F53 = false;
bool F54 = false;
bool F55 = false;
bool F56 = false;
bool F57 = false;
bool F58 = false;
bool F59 = false;
bool F60 = false;
bool F61 = false;
bool F62 = false;
bool F63 = false;
bool F64 = false;
bool F65 = false;
bool F66 = false;
bool F67 = false;
bool F68 = false;
bool F69 = false;
bool F70 = false;
bool F71 = false;
bool F72 = false;
bool F73 = false;
bool F74 = false;
bool F75 = false;
bool F76 = false;
bool F77 = false;
bool F78 = false;
bool F79 = false;
bool F80 = false;
bool F81 = false;
bool F82 = false;
bool F83 = false;

bool FB1 = false;
bool FB2 = false;
bool FB3 = false;
bool FB4 = false;
bool FB5 = false;
bool FB6 = false;
bool FB8 = false;
bool FB9 = false;
bool FB10 = false;
bool FB11 = false;
bool FB12 = false;
bool FB13 = false;
bool FB14 = false;
bool FB15 = false;
bool FB16 = false;
bool FB17 = false;
bool FB18 = false;
bool FB19 = false;
bool FB20 = false;
bool FB21 = false;
bool FB22 = false;
bool FB23 = false;
bool FB24 = false;
bool FB25 = false;
bool FB26 = false;
bool FB27 = false;
bool FB28 = false;
bool FB29 = false;
bool FB30 = false;
bool FB31 = false;
bool FB32 = false;
bool FB33 = false;
bool FB34 = false;
bool FB35 = false;
bool FB36 = false;
bool FB37 = false;
bool FB38 = false;
bool FB39 = false;
bool FB40 = false;
bool FB41 = false;
bool FB42 = false;
bool FB43 = false;
bool FB44 = false;
bool FB45 = false;
bool FB46 = false;
bool FB47 = false;
bool FB48 = false;
bool FB49 = false;
bool FB50 = false;
bool FB51 = false;
bool FB52 = false;
bool FB53 = false;
bool FB54 = false;
bool FB55 = false;
bool FB56 = false;
bool FB57 = false;
bool FB58 = false;
bool FB59 = false;
bool FB60 = false;
bool FB61 = false;
bool FB62 = false;
bool FB63 = false;
bool FB64 = false;
bool FB65 = false;
bool FB66 = false;
bool FB67 = false;
bool FB68 = false;
bool FB69 = false;
bool FB70 = false;
bool FB71 = false;
bool FB72 = false;
bool FB73 = false;
bool FB74 = false;
bool FB75 = false;
bool FB76 = false;
bool FB77 = false;
bool FB78 = false;
bool FB79 = false;
bool FB80 = false;
bool FB81 = false;
bool FB82 = false;
bool FB83 = false;


int F;
int FB;

int C1 = 1;
int C2 = 1;
int C3 = 1;
int C5 = 1;
int C6 = 1;
int C8 = 1;
int C9 = 1;
int C10 = 1;
int C11 = 1;
int C12 = 1;
int C13 = 1;
int C14 = 1;
int C15 = 1;
int C16 = 1;
int C17 = 1;
int C18 = 1;
int C19 = 1;
int C20 = 1;
int C21 = 1;
int C22 = 1;
int C23 = 1;
int C24 = 1;
int C25 = 1;
int C26 = 1;
int C27 = 1;
int C28 = 1;
int C29 = 1;
int C30 = 1;
int C31 = 1;
int C32 = 1;
int C33 = 1;
int C34 = 1;
int C35 = 1;
int C36 = 1;
int C37 = 1;
int C38 = 1;
int C39 = 1;
int C40 = 1;
int C41 = 1;
int C42 = 1;
int C43 = 1;
int C44 = 1;
int C45 = 1;
int C46 = 1;
int C47 = 1;
int C48 = 1;
int C49 = 1;
int C50 = 1;
int C51 = 1;
int C52 = 1;
int C53 = 1;
int C54 = 1;
int C55 = 1;
int C56 = 1;
int C57 = 1;
int C58 = 1;
int C59 = 1;
int C60 = 1;
int C61 = 1;
int C62 = 1;
int C63 = 1;
int C64 = 1;
int C65 = 1;
int C66 = 1;
int C67 = 1;
int C68 = 1;
int C69 = 1;
int C70 = 1;
int C71 = 1;
int C72 = 1;
int C73 = 1;
int C74 = 1;
int C75 = 1;
int C76 = 1;
int C77 = 1;
int C78 = 1;
int C79 = 1;
int C80 = 1;
int C81 = 1;
int C82 = 1;
int C83 = 1;

bool IsFWD_1 = true;
bool IsFWD_2 = true;
bool IsFWD_3 = true;
bool IsFWD_5 = true;
bool IsFWD_6 = true;
bool IsFWD_8 = true;
bool IsFWD_9 = true;
bool IsFWD_10 = true;
bool IsFWD_11 = true;
bool IsFWD_12 = true;
bool IsFWD_13 = true;
bool IsFWD_14 = true;
bool IsFWD_15 = true;
bool IsFWD_16 = true;
bool IsFWD_17 = true;
bool IsFWD_18 = true;
bool IsFWD_19 = true;
bool IsFWD_20 = true;
bool IsFWD_21 = true;
bool IsFWD_22 = true;
bool IsFWD_23 = true;
bool IsFWD_24 = true;
bool IsFWD_25 = true;
bool IsFWD_26 = true;
bool IsFWD_27 = true;
bool IsFWD_28 = true;
bool IsFWD_29 = true;
bool IsFWD_30 = true;
bool IsFWD_31 = true;
bool IsFWD_32 = true;
bool IsFWD_33 = true;
bool IsFWD_34 = true;
bool IsFWD_35 = true;
bool IsFWD_36 = true;
bool IsFWD_37 = true;
bool IsFWD_38 = true;
bool IsFWD_39 = true;
bool IsFWD_40 = true;
bool IsFWD_41 = true;
bool IsFWD_42 = true;
bool IsFWD_43 = true;
bool IsFWD_44 = true;
bool IsFWD_45 = true;
bool IsFWD_46 = true;
bool IsFWD_47 = true;
bool IsFWD_48 = true;
bool IsFWD_49 = true;
bool IsFWD_50 = true;
bool IsFWD_51 = true;
bool IsFWD_52 = true;
bool IsFWD_53 = true;
bool IsFWD_54 = true;
bool IsFWD_55 = true;
bool IsFWD_56 = true;
bool IsFWD_57 = true;
bool IsFWD_58 = true;
bool IsFWD_59 = true;
bool IsFWD_60 = true;
bool IsFWD_61 = true;
bool IsFWD_62 = true;
bool IsFWD_63 = true;
bool IsFWD_64 = true;
bool IsFWD_65 = true;
bool IsFWD_66 = true;
bool IsFWD_67 = true;
bool IsFWD_68 = true;
bool IsFWD_69 = true;
bool IsFWD_70 = true;
bool IsFWD_71 = true;
bool IsFWD_72 = true;
bool IsFWD_73 = true;
bool IsFWD_74 = true;
bool IsFWD_75 = true;
bool IsFWD_76 = true;
bool IsFWD_77 = true;
bool IsFWD_78 = true;
bool IsFWD_79 = true;
bool IsFWD_80 = true;
bool IsFWD_81 = true;
bool IsFWD_82 = true;
bool IsFWD_83 = true;

bool Block_1 = false;
bool Block_2 = false;
bool Block_3 = false;
bool Block_5 = false;
bool Block_6 = false;
bool Block_8 = false;
bool Block_9 = false;
bool Block_10 = false;
bool Block_11 = false;
bool Block_12 = false;
bool Block_13 = false;
bool Block_14 = false;
bool Block_15 = false;
bool Block_16 = false;
bool Block_17 = false;
bool Block_18 = false;
bool Block_19 = false;
bool Block_20 = false;
bool Block_21 = false;
bool Block_22 = false;
bool Block_23 = false;
bool Block_24 = false;
bool Block_25 = false;
bool Block_26 = false;
bool Block_27 = false;
bool Block_28 = false;
bool Block_29 = false;
bool Block_30 = false;
bool Block_31 = false;
bool Block_32 = false;
bool Block_33 = false;
bool Block_34 = false;
bool Block_35 = false;
bool Block_36 = false;
bool Block_37 = false;
bool Block_38 = false;
bool Block_39 = false;
bool Block_40 = false;
bool Block_41 = false;
bool Block_42 = false;
bool Block_43 = false;
bool Block_44 = false;
bool Block_45 = false;
bool Block_46 = false;
bool Block_47 = false;
bool Block_48 = false;
bool Block_49 = false;
bool Block_50 = false;
bool Block_51 = false;
bool Block_52 = false;
bool Block_53 = false;
bool Block_54 = false;
bool Block_55 = false;
bool Block_56 = false;
bool Block_57 = false;
bool Block_58 = false;
bool Block_59 = false;
bool Block_60 = false;
bool Block_61 = false;
bool Block_62 = false;
bool Block_63 = false;
bool Block_64 = false;
bool Block_65 = false;
bool Block_66 = false;
bool Block_67 = false;
bool Block_68 = false;
bool Block_69 = false;
bool Block_70 = false;
bool Block_71 = false;
bool Block_72 = false;
bool Block_73 = false;
bool Block_74 = false;
bool Block_75 = false;
bool Block_76 = false;
bool Block_77 = false;
bool Block_78 = false;
bool Block_79 = false;
bool Block_80 = false;
bool Block_81 = false;
bool Block_82 = false;
bool Block_83 = false;

void Isc(int L, int LB){
  if (L==39){
   F = 39;
   Irc_8 = Isc_8_39;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_42 = 0;
   Irc_43 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_33 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_37 - Irc_38 - Irc_43 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_32 = Irc_33 - Irc_31;
   Irc_39 = Irc_32 - Irc_30 - Irc_29;
  }
  else if (L==40){
   F = 40;
   Irc_8 = Isc_8_40;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_41 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_43 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_42 = Irc_43 - Irc_41;
   Irc_40 = Irc_42 - Irc_49;
  }
  else if (L==41){
   F = 41;
   Irc_8 = Isc_8_41;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_42 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_43 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_41 = Irc_43 - Irc_42;
  }
  else if (L==42){
   F = 42;
   Irc_8 = Isc_8_42;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_43 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_42 = Irc_43 - Irc_41;
  }
  else if (L==43){
   F = 43;
   Irc_8 = Isc_8_43;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_42 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_43 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
  }
  else if (L==44){
   F = 44;
   Irc_8 = Isc_8_44;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_42 = 0;
   Irc_43 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_47 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_43 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_44 = Irc_47 - Irc_46 - Irc_45;
  }
  else if (LB==20){
   FB = 20;
   Irc_8 = Iscb_8_20;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_21 = 0;
   Irc_24 = 0;
   Irc_25 = 0;
   Irc_26 = 0;
   Irc_27 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_42 = 0;
   Irc_43 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_23 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_27 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_43 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_22 = Irc_23 - Irc_21;
   Irc_20 = Irc_22 - Irc_19;
  }
  else if (LB==25){
   FB = 25;
   Irc_8 = Iscb_8_25;
   Irc_1 = 0;
   Irc_2 = 0;
   Irc_3 = 0;
   Irc_5 = 0;
   Irc_6 = 0;
   Irc_9 = 0;
   Irc_10 = 0;
   Irc_11 = 0;
   Irc_12 = 0;
   Irc_13 = 0;
   Irc_14 = 0;
   Irc_15 = 0;
   Irc_16 = 0;
   Irc_17 = 0;
   Irc_18 = 0;
   Irc_19 = 0;
   Irc_20 = 0;
   Irc_21 = 0;
   Irc_22 = 0;
   Irc_23 = 0;
   Irc_24 = 0;
   Irc_26 = 0;
   Irc_28 = 0;
   Irc_29 = 0;
   Irc_30 = 0;
   Irc_31 = 0;
   Irc_32 = 0;
   Irc_33 = 0;
   Irc_34 = 0;
   Irc_35 = 0;
   Irc_36 = 0;
   Irc_37 = 0;
   Irc_38 = 0;
   Irc_39 = 0;
   Irc_40 = 0;
   Irc_41 = 0;
   Irc_42 = 0;
   Irc_43 = 0;
   Irc_44 = 0;
   Irc_45 = 0;
   Irc_46 = 0;
   Irc_47 = 0;
   Irc_48 = 0;
   Irc_49 = 0;
   Irc_50 = 0;
   Irc_51 = 0;
   Irc_52 = 0;
   Irc_53 = 0;
   Irc_54 = 0;
   Irc_55 = 0;
   Irc_56 = 0;
   Irc_57 = 0;
   Irc_58 = 0;
   Irc_59 = 0;
   Irc_60 = 0;
   Irc_61 = 0;
   Irc_62 = 0;
   Irc_63 = 0;
   Irc_64 = 0;
   Irc_65 = 0;
   Irc_66 = 0;
   Irc_67 = 0;
   Irc_68 = 0;
   Irc_69 = 0;
   Irc_70 = 0;
   Irc_71 = 0;
   Irc_72 = 0;
   Irc_73 = 0;
   Irc_74 = 0;
   Irc_75 = 0;
   Irc_76 = 0;
   Irc_77 = 0;
   Irc_78 = 0;
   Irc_79 = 0;
   Irc_80 = 0;
   Irc_81 = 0;
   Irc_82 = 0;
   Irc_83 = 0;
   Irc_27 = Irc_8 - Irc_6 - Irc_5 - Irc_13 - Irc_17 - Irc_18 - Irc_23 - Irc_28 - Irc_33 - Irc_37 - Irc_38 - Irc_43 - Irc_47 - Irc_48 - Irc_53 - Irc_57 - Irc_58 - Irc_63 - Irc_67 - Irc_68 - Irc_73 - Irc_77 - Irc_78 - Irc_83;
   Irc_25 = Irc_27 - Irc_26 - Irc_24;
  }
}
void update(int CB_ID){
 if (F==39){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
   Irc_43 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (F==40){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (F==41){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (F==42){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (F==43){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (F==44){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
   Irc_43 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (FB==20){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
   Irc_25 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
   Irc_27 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
   Irc_43 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }

 else if (FB==25){
  if (CB_ID==1){
   C1 = 0;
   Irc_1 = 0;
  }
  else if (CB_ID==2){
   C2 = 0;
   Irc_2 = 0;
  }
  else if (CB_ID==3){
   C3 = 0;
   Irc_3 = 0;
  }
  else if (CB_ID==5){
   C5 = 0;
   Irc_5 = 0;
  }
  else if (CB_ID==6){
   C6 = 0;
   Irc_6 = 0;
  }
  else if (CB_ID==8){
   C8 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==9){
   C9 = 0;
   Irc_9 = 0;
  }
  else if (CB_ID==10){
   C10 = 0;
   Irc_10 = 0;
  }
  else if (CB_ID==11){
   C11 = 0;
   Irc_11 = 0;
  }
  else if (CB_ID==12){
   C12 = 0;
   Irc_12 = 0;
  }
  else if (CB_ID==13){
   C13 = 0;
   Irc_13 = 0;
  }
  else if (CB_ID==14){
   C14 = 0;
   Irc_14 = 0;
  }
  else if (CB_ID==15){
   C15 = 0;
   Irc_15 = 0;
  }
  else if (CB_ID==16){
   C16 = 0;
   Irc_16 = 0;
  }
  else if (CB_ID==17){
   C17 = 0;
   Irc_17 = 0;
  }
  else if (CB_ID==18){
   C18 = 0;
   Irc_18 = 0;
  }
  else if (CB_ID==19){
   C19 = 0;
   Irc_19 = 0;
  }
  else if (CB_ID==20){
   C20 = 0;
   Irc_20 = 0;
  }
  else if (CB_ID==21){
   C21 = 0;
   Irc_21 = 0;
  }
  else if (CB_ID==22){
   C22 = 0;
   Irc_22 = 0;
  }
  else if (CB_ID==23){
   C23 = 0;
   Irc_23 = 0;
  }
  else if (CB_ID==24){
   C24 = 0;
   Irc_24 = 0;
  }
  else if (CB_ID==25){
   C25 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==26){
   C26 = 0;
   Irc_26 = 0;
  }
  else if (CB_ID==27){
   C27 = 0;
  Irc_1 = 0;
  Irc_2 = 0;
  Irc_3 = 0;
  Irc_5 = 0;
  Irc_6 = 0;
  Irc_8 = 0;
  Irc_9 = 0;
  Irc_10 = 0;
  Irc_11 = 0;
  Irc_12 = 0;
  Irc_13 = 0;
  Irc_14 = 0;
  Irc_15 = 0;
  Irc_16 = 0;
  Irc_17 = 0;
  Irc_18 = 0;
  Irc_19 = 0;
  Irc_20 = 0;
  Irc_21 = 0;
  Irc_22 = 0;
  Irc_23 = 0;
  Irc_24 = 0;
  Irc_25 = 0;
  Irc_26 = 0;
  Irc_27 = 0;
  Irc_28 = 0;
  Irc_29 = 0;
  Irc_30 = 0;
  Irc_31 = 0;
  Irc_32 = 0;
  Irc_33 = 0;
  Irc_34 = 0;
  Irc_35 = 0;
  Irc_36 = 0;
  Irc_37 = 0;
  Irc_38 = 0;
  Irc_39 = 0;
  Irc_40 = 0;
  Irc_41 = 0;
  Irc_42 = 0;
  Irc_43 = 0;
  Irc_44 = 0;
  Irc_45 = 0;
  Irc_46 = 0;
  Irc_47 = 0;
  Irc_48 = 0;
  Irc_49 = 0;
  Irc_50 = 0;
  Irc_51 = 0;
  Irc_52 = 0;
  Irc_53 = 0;
  Irc_54 = 0;
  Irc_55 = 0;
  Irc_56 = 0;
  Irc_57 = 0;
  Irc_58 = 0;
  Irc_59 = 0;
  Irc_60 = 0;
  Irc_61 = 0;
  Irc_62 = 0;
  Irc_63 = 0;
  Irc_64 = 0;
  Irc_65 = 0;
  Irc_66 = 0;
  Irc_67 = 0;
  Irc_68 = 0;
  Irc_69 = 0;
  Irc_70 = 0;
  Irc_71 = 0;
  Irc_72 = 0;
  Irc_73 = 0;
  Irc_74 = 0;
  Irc_75 = 0;
  Irc_76 = 0;
  Irc_77 = 0;
  Irc_78 = 0;
  Irc_79 = 0;
  Irc_80 = 0;
  Irc_81 = 0;
  Irc_82 = 0;
  Irc_83 = 0;
  }
  else if (CB_ID==28){
   C28 = 0;
   Irc_28 = 0;
  }
  else if (CB_ID==29){
   C29 = 0;
   Irc_29 = 0;
  }
  else if (CB_ID==30){
   C30 = 0;
   Irc_30 = 0;
  }
  else if (CB_ID==31){
   C31 = 0;
   Irc_31 = 0;
  }
  else if (CB_ID==32){
   C32 = 0;
   Irc_32 = 0;
  }
  else if (CB_ID==33){
   C33 = 0;
   Irc_33 = 0;
  }
  else if (CB_ID==34){
   C34 = 0;
   Irc_34 = 0;
  }
  else if (CB_ID==35){
   C35 = 0;
   Irc_35 = 0;
  }
  else if (CB_ID==36){
   C36 = 0;
   Irc_36 = 0;
  }
  else if (CB_ID==37){
   C37 = 0;
   Irc_37 = 0;
  }
  else if (CB_ID==38){
   C38 = 0;
   Irc_38 = 0;
  }
  else if (CB_ID==39){
   C39 = 0;
   Irc_39 = 0;
  }
  else if (CB_ID==40){
   C40 = 0;
   Irc_40 = 0;
  }
  else if (CB_ID==41){
   C41 = 0;
   Irc_41 = 0;
  }
  else if (CB_ID==42){
   C42 = 0;
   Irc_42 = 0;
  }
  else if (CB_ID==43){
   C43 = 0;
   Irc_43 = 0;
  }
  else if (CB_ID==44){
   C44 = 0;
   Irc_44 = 0;
  }
  else if (CB_ID==45){
   C45 = 0;
   Irc_45 = 0;
  }
  else if (CB_ID==46){
   C46 = 0;
   Irc_46 = 0;
  }
  else if (CB_ID==47){
   C47 = 0;
   Irc_47 = 0;
  }
  else if (CB_ID==48){
   C48 = 0;
   Irc_48 = 0;
  }
  else if (CB_ID==49){
   C49 = 0;
   Irc_49 = 0;
  }
  else if (CB_ID==50){
   C50 = 0;
   Irc_50 = 0;
  }
  else if (CB_ID==51){
   C51 = 0;
   Irc_51 = 0;
  }
  else if (CB_ID==52){
   C52 = 0;
   Irc_52 = 0;
  }
  else if (CB_ID==53){
   C53 = 0;
   Irc_53 = 0;
  }
  else if (CB_ID==54){
   C54 = 0;
   Irc_54 = 0;
  }
  else if (CB_ID==55){
   C55 = 0;
   Irc_55 = 0;
  }
  else if (CB_ID==56){
   C56 = 0;
   Irc_56 = 0;
  }
  else if (CB_ID==57){
   C57 = 0;
   Irc_57 = 0;
  }
  else if (CB_ID==58){
   C58 = 0;
   Irc_58 = 0;
  }
  else if (CB_ID==59){
   C59 = 0;
   Irc_59 = 0;
  }
  else if (CB_ID==60){
   C60 = 0;
   Irc_60 = 0;
  }
  else if (CB_ID==61){
   C61 = 0;
   Irc_61 = 0;
  }
  else if (CB_ID==62){
   C62 = 0;
   Irc_62 = 0;
  }
  else if (CB_ID==63){
   C63 = 0;
   Irc_63 = 0;
  }
  else if (CB_ID==64){
   C64 = 0;
   Irc_64 = 0;
  }
  else if (CB_ID==65){
   C65 = 0;
   Irc_65 = 0;
  }
  else if (CB_ID==66){
   C66 = 0;
   Irc_66 = 0;
  }
  else if (CB_ID==67){
   C67 = 0;
   Irc_67 = 0;
  }
  else if (CB_ID==68){
   C68 = 0;
   Irc_68 = 0;
  }
  else if (CB_ID==69){
   C69 = 0;
   Irc_69 = 0;
  }
  else if (CB_ID==70){
   C70 = 0;
   Irc_70 = 0;
  }
  else if (CB_ID==71){
   C71 = 0;
   Irc_71 = 0;
  }
  else if (CB_ID==72){
   C72 = 0;
   Irc_72 = 0;
  }
  else if (CB_ID==73){
   C73 = 0;
   Irc_73 = 0;
  }
  else if (CB_ID==74){
   C74 = 0;
   Irc_74 = 0;
  }
  else if (CB_ID==75){
   C75 = 0;
   Irc_75 = 0;
  }
  else if (CB_ID==76){
   C76 = 0;
   Irc_76 = 0;
  }
  else if (CB_ID==77){
   C77 = 0;
   Irc_77 = 0;
  }
  else if (CB_ID==78){
   C78 = 0;
   Irc_78 = 0;
  }
  else if (CB_ID==79){
   C79 = 0;
   Irc_79 = 0;
  }
  else if (CB_ID==80){
   C80 = 0;
   Irc_80 = 0;
  }
  else if (CB_ID==81){
   C81 = 0;
   Irc_81 = 0;
  }
  else if (CB_ID==82){
   C82 = 0;
   Irc_82 = 0;
  }
  else if (CB_ID==83){
   C83 = 0;
   Irc_83 = 0;
  }
 }
}
void clear (){
  Irc_1 = Iioc_1;
  Irc_2 = Iioc_2;
  Irc_3 = Iioc_3;
  Irc_5 = Iioc_5;
  Irc_6 = Iioc_6;
  Irc_8 = Iioc_8;
  Irc_9 = Iioc_9;
  Irc_10 = Iioc_10;
  Irc_11 = Iioc_11;
  Irc_12 = Iioc_12;
  Irc_13 = Iioc_13;
  Irc_14 = Iioc_14;
  Irc_15 = Iioc_15;
  Irc_16 = Iioc_16;
  Irc_17 = Iioc_17;
  Irc_18 = Iioc_18;
  Irc_19 = Iioc_19;
  Irc_20 = Iioc_20;
  Irc_21 = Iioc_21;
  Irc_22 = Iioc_22;
  Irc_23 = Iioc_23;
  Irc_24 = Iioc_24;
  Irc_25 = Iioc_25;
  Irc_26 = Iioc_26;
  Irc_27 = Iioc_27;
  Irc_28 = Iioc_28;
  Irc_29 = Iioc_29;
  Irc_30 = Iioc_30;
  Irc_31 = Iioc_31;
  Irc_32 = Iioc_32;
  Irc_33 = Iioc_33;
  Irc_34 = Iioc_34;
  Irc_35 = Iioc_35;
  Irc_36 = Iioc_36;
  Irc_37 = Iioc_37;
  Irc_38 = Iioc_38;
  Irc_39 = Iioc_39;
  Irc_40 = Iioc_40;
  Irc_41 = Iioc_41;
  Irc_42 = Iioc_42;
  Irc_43 = Iioc_43;
  Irc_44 = Iioc_44;
  Irc_45 = Iioc_45;
  Irc_46 = Iioc_46;
  Irc_47 = Iioc_47;
  Irc_48 = Iioc_48;
  Irc_49 = Iioc_49;
  Irc_50 = Iioc_50;
  Irc_51 = Iioc_51;
  Irc_52 = Iioc_52;
  Irc_53 = Iioc_53;
  Irc_54 = Iioc_54;
  Irc_55 = Iioc_55;
  Irc_56 = Iioc_56;
  Irc_57 = Iioc_57;
  Irc_58 = Iioc_58;
  Irc_59 = Iioc_59;
  Irc_60 = Iioc_60;
  Irc_61 = Iioc_61;
  Irc_62 = Iioc_62;
  Irc_63 = Iioc_63;
  Irc_64 = Iioc_64;
  Irc_65 = Iioc_65;
  Irc_66 = Iioc_66;
  Irc_67 = Iioc_67;
  Irc_68 = Iioc_68;
  Irc_69 = Iioc_69;
  Irc_70 = Iioc_70;
  Irc_71 = Iioc_71;
  Irc_72 = Iioc_72;
  Irc_73 = Iioc_73;
  Irc_74 = Iioc_74;
  Irc_75 = Iioc_75;
  Irc_76 = Iioc_76;
  Irc_77 = Iioc_77;
  Irc_78 = Iioc_78;
  Irc_79 = Iioc_79;
  Irc_80 = Iioc_80;
  Irc_81 = Iioc_81;
  Irc_82 = Iioc_82;
  Irc_83 = Iioc_83;
  IsFWD_1 = true;
  IsFWD_2 = true;
  IsFWD_3 = true;
  IsFWD_5 = true;
  IsFWD_6 = true;
  IsFWD_8 = true;
  IsFWD_9 = true;
  IsFWD_10 = true;
  IsFWD_11 = true;
  IsFWD_12 = true;
  IsFWD_13 = true;
  IsFWD_14 = true;
  IsFWD_15 = true;
  IsFWD_16 = true;
  IsFWD_17 = true;
  IsFWD_18 = true;
  IsFWD_19 = true;
  IsFWD_20 = true;
  IsFWD_21 = true;
  IsFWD_22 = true;
  IsFWD_23 = true;
  IsFWD_24 = true;
  IsFWD_25 = true;
  IsFWD_26 = true;
  IsFWD_27 = true;
  IsFWD_28 = true;
  IsFWD_29 = true;
  IsFWD_30 = true;
  IsFWD_31 = true;
  IsFWD_32 = true;
  IsFWD_33 = true;
  IsFWD_34 = true;
  IsFWD_35 = true;
  IsFWD_36 = true;
  IsFWD_37 = true;
  IsFWD_38 = true;
  IsFWD_39 = true;
  IsFWD_40 = true;
  IsFWD_41 = true;
  IsFWD_42 = true;
  IsFWD_43 = true;
  IsFWD_44 = true;
  IsFWD_45 = true;
  IsFWD_46 = true;
  IsFWD_47 = true;
  IsFWD_48 = true;
  IsFWD_49 = true;
  IsFWD_50 = true;
  IsFWD_51 = true;
  IsFWD_52 = true;
  IsFWD_53 = true;
  IsFWD_54 = true;
  IsFWD_55 = true;
  IsFWD_56 = true;
  IsFWD_57 = true;
  IsFWD_58 = true;
  IsFWD_59 = true;
  IsFWD_60 = true;
  IsFWD_61 = true;
  IsFWD_62 = true;
  IsFWD_63 = true;
  IsFWD_64 = true;
  IsFWD_65 = true;
  IsFWD_66 = true;
  IsFWD_67 = true;
  IsFWD_68 = true;
  IsFWD_69 = true;
  IsFWD_70 = true;
  IsFWD_71 = true;
  IsFWD_72 = true;
  IsFWD_73 = true;
  IsFWD_74 = true;
  IsFWD_75 = true;
  IsFWD_76 = true;
  IsFWD_77 = true;
  IsFWD_78 = true;
  IsFWD_79 = true;
  IsFWD_80 = true;
  IsFWD_81 = true;
  IsFWD_82 = true;
  IsFWD_83 = true;
  Block_1 = false;
  Block_2 = false;
  Block_3 = false;
  Block_5 = false;
  Block_6 = false;
  Block_8 = false;
  Block_9 = false;
  Block_10 = false;
  Block_11 = false;
  Block_12 = false;
  Block_13 = false;
  Block_14 = false;
  Block_15 = false;
  Block_16 = false;
  Block_17 = false;
  Block_18 = false;
  Block_19 = false;
  Block_20 = false;
  Block_21 = false;
  Block_22 = false;
  Block_23 = false;
  Block_24 = false;
  Block_25 = false;
  Block_26 = false;
  Block_27 = false;
  Block_28 = false;
  Block_29 = false;
  Block_30 = false;
  Block_31 = false;
  Block_32 = false;
  Block_33 = false;
  Block_34 = false;
  Block_35 = false;
  Block_36 = false;
  Block_37 = false;
  Block_38 = false;
  Block_39 = false;
  Block_40 = false;
  Block_41 = false;
  Block_42 = false;
  Block_43 = false;
  Block_44 = false;
  Block_45 = false;
  Block_46 = false;
  Block_47 = false;
  Block_48 = false;
  Block_49 = false;
  Block_50 = false;
  Block_51 = false;
  Block_52 = false;
  Block_53 = false;
  Block_54 = false;
  Block_55 = false;
  Block_56 = false;
  Block_57 = false;
  Block_58 = false;
  Block_59 = false;
  Block_60 = false;
  Block_61 = false;
  Block_62 = false;
  Block_63 = false;
  Block_64 = false;
  Block_65 = false;
  Block_66 = false;
  Block_67 = false;
  Block_68 = false;
  Block_69 = false;
  Block_70 = false;
  Block_71 = false;
  Block_72 = false;
  Block_73 = false;
  Block_74 = false;
  Block_75 = false;
  Block_76 = false;
  Block_77 = false;
  Block_78 = false;
  Block_79 = false;
  Block_80 = false;
  Block_81 = false;
  Block_82 = false;
  Block_83 = false;
}
</declaration>
<template>
  <name>Fault_Generator</name>
  <location id="id0" x="-306" y="-127">
    <name x="-357" y="-161">No_Fault</name>
  </location>
  <location id="id1" x="263" y="-127">
    <name x="253" y="-161">Fault_Signal</name>
    <committed/>
  </location>
  <location id="id2" x="-306" y="221">
    <name x="-349" y="238">Reset_Ready</name>
  </location>
  <location id="id3" x="272" y="221">
    <name x="238" y="238">Check_Fault</name>
    <committed/>
  </location>
  <location id="id4" x="476" y="25">
    <name x="466" y="-9">Fault</name>
  </location>
  <init ref="id0"/>
    <transition>
      <source ref="id3"/>
      <target ref="id2"/>
      <label kind="guard">Irc_1&lt;Ith_1 &amp;&amp; Irc_2&lt;Ith_2 &amp;&amp; Irc_3&lt;Ith_3 &amp;&amp; Irc_5&lt;Ith_5 &amp;&amp; Irc_6&lt;Ith_6 &amp;&amp; Irc_8&lt;Ith_8 &amp;&amp; Irc_9&lt;Ith_9 &amp;&amp; Irc_10&lt;Ith_10 &amp;&amp; Irc_11&lt;Ith_11 &amp;&amp; Irc_12&lt;Ith_12 &amp;&amp; Irc_13&lt;Ith_13 &amp;&amp; Irc_14&lt;Ith_14 &amp;&amp; Irc_15&lt;Ith_15 &amp;&amp; Irc_16&lt;Ith_16 &amp;&amp; Irc_17&lt;Ith_17 &amp;&amp; Irc_18&lt;Ith_18 &amp;&amp; Irc_19&lt;Ith_19 &amp;&amp; Irc_20&lt;Ith_20 &amp;&amp; Irc_21&lt;Ith_21 &amp;&amp; Irc_22&lt;Ith_22 &amp;&amp; Irc_23&lt;Ith_23 &amp;&amp; Irc_24&lt;Ith_24 &amp;&amp; Irc_25&lt;Ith_25 &amp;&amp; Irc_26&lt;Ith_26 &amp;&amp; Irc_27&lt;Ith_27 &amp;&amp; Irc_28&lt;Ith_28 &amp;&amp; Irc_29&lt;Ith_29 &amp;&amp; Irc_30&lt;Ith_30 &amp;&amp; Irc_31&lt;Ith_31 &amp;&amp; Irc_32&lt;Ith_32 &amp;&amp; Irc_33&lt;Ith_33 &amp;&amp; Irc_34&lt;Ith_34 &amp;&amp; Irc_35&lt;Ith_35 &amp;&amp; Irc_36&lt;Ith_36 &amp;&amp; Irc_37&lt;Ith_37 &amp;&amp; Irc_38&lt;Ith_38 &amp;&amp; Irc_39&lt;Ith_39 &amp;&amp; Irc_40&lt;Ith_40 &amp;&amp; Irc_41&lt;Ith_41 &amp;&amp; Irc_42&lt;Ith_42 &amp;&amp; Irc_43&lt;Ith_43 &amp;&amp; Irc_44&lt;Ith_44 &amp;&amp; Irc_45&lt;Ith_45 &amp;&amp; Irc_46&lt;Ith_46 &amp;&amp; Irc_47&lt;Ith_47 &amp;&amp; Irc_48&lt;Ith_48 &amp;&amp; Irc_49&lt;Ith_49 &amp;&amp; Irc_50&lt;Ith_50 &amp;&amp; Irc_51&lt;Ith_51 &amp;&amp; Irc_52&lt;Ith_52 &amp;&amp; Irc_53&lt;Ith_53 &amp;&amp; Irc_54&lt;Ith_54 &amp;&amp; Irc_55&lt;Ith_55 &amp;&amp; Irc_56&lt;Ith_56 &amp;&amp; Irc_57&lt;Ith_57 &amp;&amp; Irc_58&lt;Ith_58 &amp;&amp; Irc_59&lt;Ith_59 &amp;&amp; Irc_60&lt;Ith_60 &amp;&amp; Irc_61&lt;Ith_61 &amp;&amp; Irc_62&lt;Ith_62 &amp;&amp; Irc_63&lt;Ith_63 &amp;&amp; Irc_64&lt;Ith_64 &amp;&amp; Irc_65&lt;Ith_65 &amp;&amp; Irc_66&lt;Ith_66 &amp;&amp; Irc_67&lt;Ith_67 &amp;&amp; Irc_68&lt;Ith_68 &amp;&amp; Irc_69&lt;Ith_69 &amp;&amp; Irc_70&lt;Ith_70 &amp;&amp; Irc_71&lt;Ith_71 &amp;&amp; Irc_72&lt;Ith_72 &amp;&amp; Irc_73&lt;Ith_73 &amp;&amp; Irc_74&lt;Ith_74 &amp;&amp; Irc_75&lt;Ith_75 &amp;&amp; Irc_76&lt;Ith_76 &amp;&amp; Irc_77&lt;Ith_77 &amp;&amp; Irc_78&lt;Ith_78 &amp;&amp; Irc_79&lt;Ith_79 &amp;&amp; Irc_80&lt;Ith_80 &amp;&amp; Irc_81&lt;Ith_81 &amp;&amp; Irc_82&lt;Ith_82 &amp;&amp; Irc_83&lt;Ith_83</label>
      <label kind="synchronisation">Fault_cleared!</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id3"/>
      <target ref="id4"/>
      <label kind="guard">Irc_1&gt;=Ith_1 or Irc_2&gt;=Ith_2 or Irc_3&gt;=Ith_3 or Irc_5&gt;=Ith_5 or Irc_6&gt;=Ith_6 or Irc_8&gt;=Ith_8 or Irc_9&gt;=Ith_9 or Irc_10&gt;=Ith_10 or Irc_11&gt;=Ith_11 or Irc_12&gt;=Ith_12 or Irc_13&gt;=Ith_13 or Irc_14&gt;=Ith_14 or Irc_15&gt;=Ith_15 or Irc_16&gt;=Ith_16 or Irc_17&gt;=Ith_17 or Irc_18&gt;=Ith_18 or Irc_19&gt;=Ith_19 or Irc_20&gt;=Ith_20 or Irc_21&gt;=Ith_21 or Irc_22&gt;=Ith_22 or Irc_23&gt;=Ith_23 or Irc_24&gt;=Ith_24 or Irc_25&gt;=Ith_25 or Irc_26&gt;=Ith_26 or Irc_27&gt;=Ith_27 or Irc_28&gt;=Ith_28 or Irc_29&gt;=Ith_29 or Irc_30&gt;=Ith_30 or Irc_31&gt;=Ith_31 or Irc_32&gt;=Ith_32 or Irc_33&gt;=Ith_33 or Irc_34&gt;=Ith_34 or Irc_35&gt;=Ith_35 or Irc_36&gt;=Ith_36 or Irc_37&gt;=Ith_37 or Irc_38&gt;=Ith_38 or Irc_39&gt;=Ith_39 or Irc_40&gt;=Ith_40 or Irc_41&gt;=Ith_41 or Irc_42&gt;=Ith_42 or Irc_43&gt;=Ith_43 or Irc_44&gt;=Ith_44 or Irc_45&gt;=Ith_45 or Irc_46&gt;=Ith_46 or Irc_47&gt;=Ith_47 or Irc_48&gt;=Ith_48 or Irc_49&gt;=Ith_49 or Irc_50&gt;=Ith_50 or Irc_51&gt;=Ith_51 or Irc_52&gt;=Ith_52 or Irc_53&gt;=Ith_53 or Irc_54&gt;=Ith_54 or Irc_55&gt;=Ith_55 or Irc_56&gt;=Ith_56 or Irc_57&gt;=Ith_57 or Irc_58&gt;=Ith_58 or Irc_59&gt;=Ith_59 or Irc_60&gt;=Ith_60 or Irc_61&gt;=Ith_61 or Irc_62&gt;=Ith_62 or Irc_63&gt;=Ith_63 or Irc_64&gt;=Ith_64 or Irc_65&gt;=Ith_65 or Irc_66&gt;=Ith_66 or Irc_67&gt;=Ith_67 or Irc_68&gt;=Ith_68 or Irc_69&gt;=Ith_69 or Irc_70&gt;=Ith_70 or Irc_71&gt;=Ith_71 or Irc_72&gt;=Ith_72 or Irc_73&gt;=Ith_73 or Irc_74&gt;=Ith_74 or Irc_75&gt;=Ith_75 or Irc_76&gt;=Ith_76 or Irc_77&gt;=Ith_77 or Irc_78&gt;=Ith_78 or Irc_79&gt;=Ith_79 or Irc_80&gt;=Ith_80 or Irc_81&gt;=Ith_81 or Irc_82&gt;=Ith_82 or Irc_83&gt;=Ith_83</label>
      <label kind="synchronisation">Close!</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id4"/>
      <target ref="id3"/>
      <label kind="guard"></label>
      <label kind="synchronisation">CBopen?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id1"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Faults!</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_39!=0</label>
      <label kind="synchronisation">L39_fault!</label>
      <label kind="assignment">Isc(39,0), F39=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_40!=0</label>
      <label kind="synchronisation">L40_fault!</label>
      <label kind="assignment">Isc(40,0), F40=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_41!=0</label>
      <label kind="synchronisation">L41_fault!</label>
      <label kind="assignment">Isc(41,0), F41=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_42!=0</label>
      <label kind="synchronisation">L42_fault!</label>
      <label kind="assignment">Isc(42,0), F42=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_43!=0</label>
      <label kind="synchronisation">L43_fault!</label>
      <label kind="assignment">Isc(43,0), F43=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard">Irc_44!=0</label>
      <label kind="synchronisation">L44_fault!</label>
      <label kind="assignment">Isc(44,0), F44=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard"></label>
      <label kind="synchronisation">LB20_fault!</label>
      <label kind="assignment">Isc(0,20), FB20=true</label>
    </transition>
    <transition>
      <source ref="id0"/>
      <target ref="id1"/>
      <label kind="guard"></label>
      <label kind="synchronisation">LB25_fault!</label>
      <label kind="assignment">Isc(0,25), FB25=true</label>
    </transition>
    <transition>
      <source ref="id2"/>
      <target ref="id0"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset!</label>
      <label kind="assignment">F=0, FB=0, F39=false, F40=false, F41=false, F42=false, F43=false, F44=false, FB20=false, FB25=false</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_1</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_1&gt;Ith_1</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_1)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_1&lt;Ith_1</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_1&lt;Ith_1</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C1=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_1&gt;=Ith_1</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(1)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_2</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_2&gt;Ith_2</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_2)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_2&lt;Ith_2</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_2&lt;Ith_2</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C2=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_2&gt;=Ith_2</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(2)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_3</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_3&gt;Ith_3</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_3)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_3&lt;Ith_3</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_3&lt;Ith_3</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C3=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_3&gt;=Ith_3</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(3)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_5</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_5&gt;Ith_5</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_5)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_5&lt;Ith_5</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_5&lt;Ith_5</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C5=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_5&gt;=Ith_5</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(5)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_6</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_6&gt;Ith_6</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_6)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_6&lt;Ith_6</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_6&lt;Ith_6</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C6=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_6&gt;=Ith_6</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(6)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_8</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 1180;
  int t1 = 150;
  int i2 = 2478;
  int t2 = 8;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_8&gt;Ith_8</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_8)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_8&lt;Ith_8</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_8&lt;Ith_8</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C8=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_8&gt;=Ith_8</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(8)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_9</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_9&gt;Ith_9</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_9)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_9&lt;Ith_9</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_9&lt;Ith_9</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C9=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_9&gt;=Ith_9</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(9)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_10</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_10&gt;Ith_10</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_10)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_10&lt;Ith_10</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_10&lt;Ith_10</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C10=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_10&gt;=Ith_10</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(10)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_11</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_11&gt;Ith_11</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_11)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_11&lt;Ith_11</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_11&lt;Ith_11</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C11=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_11&gt;=Ith_11</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(11)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_12</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_12&gt;Ith_12</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_12)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_12&lt;Ith_12</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_12&lt;Ith_12</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C12=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_12&gt;=Ith_12</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(12)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_13</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_13&gt;Ith_13</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_13)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_13&lt;Ith_13</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_13&lt;Ith_13</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C13=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_13&gt;=Ith_13</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(13)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_14</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_14&gt;Ith_14</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_14)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_14&lt;Ith_14</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_14&lt;Ith_14</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C14=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_14&gt;=Ith_14</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(14)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_15</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_15&gt;Ith_15</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_15)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_15&lt;Ith_15</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_15&lt;Ith_15</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C15=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_15&gt;=Ith_15</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(15)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_16</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_16&gt;Ith_16</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_16)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_16&lt;Ith_16</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_16&lt;Ith_16</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C16=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_16&gt;=Ith_16</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(16)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_17</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_17&gt;Ith_17</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_17)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_17&lt;Ith_17</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_17&lt;Ith_17</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C17=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_17&gt;=Ith_17</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(17)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_18</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_18&gt;Ith_18</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_18)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_18&lt;Ith_18</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_18&lt;Ith_18</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C18=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_18&gt;=Ith_18</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(18)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_19</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_19&gt;Ith_19</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_19)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_19&lt;Ith_19</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_19&lt;Ith_19</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C19=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_19&gt;=Ith_19</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(19)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_20</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_20&gt;Ith_20</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_20)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_20&lt;Ith_20</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_20&lt;Ith_20</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C20=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_20&gt;=Ith_20</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(20)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_21</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_21&gt;Ith_21</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_21)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_21&lt;Ith_21</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_21&lt;Ith_21</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C21=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_21&gt;=Ith_21</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(21)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_22</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_22&gt;Ith_22</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_22)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_22&lt;Ith_22</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_22&lt;Ith_22</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C22=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_22&gt;=Ith_22</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(22)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_23</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_23&gt;Ith_23</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_23)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_23&lt;Ith_23</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_23&lt;Ith_23</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C23=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_23&gt;=Ith_23</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(23)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_24</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_24&gt;Ith_24</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_24)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_24&lt;Ith_24</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_24&lt;Ith_24</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C24=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_24&gt;=Ith_24</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(24)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_25</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_25&gt;Ith_25</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_25)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_25&lt;Ith_25</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_25&lt;Ith_25</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C25=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_25&gt;=Ith_25</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(25)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_26</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_26&gt;Ith_26</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_26)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_26&lt;Ith_26</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_26&lt;Ith_26</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C26=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_26&gt;=Ith_26</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(26)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_27</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_27&gt;Ith_27</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_27)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_27&lt;Ith_27</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_27&lt;Ith_27</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C27=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_27&gt;=Ith_27</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(27)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_28</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_28&gt;Ith_28</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_28)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_28&lt;Ith_28</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_28&lt;Ith_28</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C28=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_28&gt;=Ith_28</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(28)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_29</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_29&gt;Ith_29</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_29)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_29&lt;Ith_29</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_29&lt;Ith_29</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C29=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_29&gt;=Ith_29</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(29)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_30</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_30&gt;Ith_30</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_30)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_30&lt;Ith_30</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_30&lt;Ith_30</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C30=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_30&gt;=Ith_30</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(30)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_31</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_31&gt;Ith_31</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_31)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_31&lt;Ith_31</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_31&lt;Ith_31</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C31=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_31&gt;=Ith_31</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(31)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_32</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_32&gt;Ith_32</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_32)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_32&lt;Ith_32</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_32&lt;Ith_32</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C32=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_32&gt;=Ith_32</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(32)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_33</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_33&gt;Ith_33</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_33)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_33&lt;Ith_33</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_33&lt;Ith_33</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C33=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_33&gt;=Ith_33</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(33)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_34</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_34&gt;Ith_34</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_34)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_34&lt;Ith_34</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_34&lt;Ith_34</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C34=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_34&gt;=Ith_34</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(34)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_35</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_35&gt;Ith_35</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_35)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_35&lt;Ith_35</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_35&lt;Ith_35</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C35=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_35&gt;=Ith_35</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(35)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_36</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_36&gt;Ith_36</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_36)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_36&lt;Ith_36</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_36&lt;Ith_36</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C36=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_36&gt;=Ith_36</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(36)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_37</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_37&gt;Ith_37</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_37)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_37&lt;Ith_37</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_37&lt;Ith_37</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C37=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_37&gt;=Ith_37</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(37)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_38</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_38&gt;Ith_38</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_38)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_38&lt;Ith_38</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_38&lt;Ith_38</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C38=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_38&gt;=Ith_38</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(38)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_39</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_39&gt;Ith_39</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_39)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_39&lt;Ith_39</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_39&lt;Ith_39</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C39=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_39&gt;=Ith_39</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(39)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_40</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_40&gt;Ith_40</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_40)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_40&lt;Ith_40</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_40&lt;Ith_40</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C40=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_40&gt;=Ith_40</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(40)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_41</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_41&gt;Ith_41</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_41)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_41&lt;Ith_41</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_41&lt;Ith_41</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C41=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_41&gt;=Ith_41</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(41)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_42</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_42&gt;Ith_42</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_42)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_42&lt;Ith_42</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_42&lt;Ith_42</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C42=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_42&gt;=Ith_42</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(42)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_43</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_43&gt;Ith_43</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_43)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_43&lt;Ith_43</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_43&lt;Ith_43</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C43=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_43&gt;=Ith_43</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(43)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_44</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_44&gt;Ith_44</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_44)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_44&lt;Ith_44</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_44&lt;Ith_44</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C44=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_44&gt;=Ith_44</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(44)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_45</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_45&gt;Ith_45</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_45)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_45&lt;Ith_45</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_45&lt;Ith_45</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C45=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_45&gt;=Ith_45</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(45)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_46</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_46&gt;Ith_46</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_46)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_46&lt;Ith_46</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_46&lt;Ith_46</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C46=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_46&gt;=Ith_46</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(46)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_47</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_47&gt;Ith_47</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_47)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_47&lt;Ith_47</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_47&lt;Ith_47</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C47=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_47&gt;=Ith_47</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(47)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_48</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_48&gt;Ith_48</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_48)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_48&lt;Ith_48</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_48&lt;Ith_48</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C48=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_48&gt;=Ith_48</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(48)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_49</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_49&gt;Ith_49</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_49)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_49&lt;Ith_49</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_49&lt;Ith_49</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C49=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_49&gt;=Ith_49</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(49)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_50</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_50&gt;Ith_50</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_50)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_50&lt;Ith_50</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_50&lt;Ith_50</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C50=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_50&gt;=Ith_50</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(50)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_51</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_51&gt;Ith_51</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_51)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_51&lt;Ith_51</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_51&lt;Ith_51</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C51=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_51&gt;=Ith_51</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(51)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_52</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_52&gt;Ith_52</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_52)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_52&lt;Ith_52</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_52&lt;Ith_52</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C52=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_52&gt;=Ith_52</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(52)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_53</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_53&gt;Ith_53</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_53)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_53&lt;Ith_53</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_53&lt;Ith_53</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C53=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_53&gt;=Ith_53</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(53)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_54</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_54&gt;Ith_54</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_54)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_54&lt;Ith_54</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_54&lt;Ith_54</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C54=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_54&gt;=Ith_54</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(54)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_55</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_55&gt;Ith_55</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_55)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_55&lt;Ith_55</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_55&lt;Ith_55</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C55=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_55&gt;=Ith_55</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(55)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_56</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_56&gt;Ith_56</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_56)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_56&lt;Ith_56</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_56&lt;Ith_56</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C56=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_56&gt;=Ith_56</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(56)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_57</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_57&gt;Ith_57</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_57)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_57&lt;Ith_57</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_57&lt;Ith_57</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C57=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_57&gt;=Ith_57</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(57)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_58</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_58&gt;Ith_58</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_58)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_58&lt;Ith_58</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_58&lt;Ith_58</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C58=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_58&gt;=Ith_58</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(58)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_59</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_59&gt;Ith_59</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_59)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_59&lt;Ith_59</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_59&lt;Ith_59</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C59=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_59&gt;=Ith_59</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(59)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_60</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_60&gt;Ith_60</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_60)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_60&lt;Ith_60</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_60&lt;Ith_60</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C60=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_60&gt;=Ith_60</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(60)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_61</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_61&gt;Ith_61</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_61)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_61&lt;Ith_61</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_61&lt;Ith_61</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C61=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_61&gt;=Ith_61</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(61)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_62</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_62&gt;Ith_62</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_62)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_62&lt;Ith_62</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_62&lt;Ith_62</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C62=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_62&gt;=Ith_62</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(62)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_63</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_63&gt;Ith_63</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_63)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_63&lt;Ith_63</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_63&lt;Ith_63</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C63=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_63&gt;=Ith_63</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(63)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_64</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_64&gt;Ith_64</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_64)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_64&lt;Ith_64</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_64&lt;Ith_64</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C64=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_64&gt;=Ith_64</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(64)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_65</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_65&gt;Ith_65</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_65)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_65&lt;Ith_65</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_65&lt;Ith_65</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C65=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_65&gt;=Ith_65</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(65)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_66</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_66&gt;Ith_66</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_66)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_66&lt;Ith_66</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_66&lt;Ith_66</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C66=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_66&gt;=Ith_66</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(66)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_67</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_67&gt;Ith_67</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_67)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_67&lt;Ith_67</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_67&lt;Ith_67</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C67=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_67&gt;=Ith_67</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(67)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_68</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_68&gt;Ith_68</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_68)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_68&lt;Ith_68</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_68&lt;Ith_68</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C68=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_68&gt;=Ith_68</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(68)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_69</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_69&gt;Ith_69</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_69)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_69&lt;Ith_69</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_69&lt;Ith_69</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C69=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_69&gt;=Ith_69</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(69)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_70</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_70&gt;Ith_70</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_70)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_70&lt;Ith_70</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_70&lt;Ith_70</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C70=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_70&gt;=Ith_70</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(70)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_71</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_71&gt;Ith_71</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_71)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_71&lt;Ith_71</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_71&lt;Ith_71</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C71=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_71&gt;=Ith_71</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(71)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_72</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_72&gt;Ith_72</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_72)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_72&lt;Ith_72</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_72&lt;Ith_72</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C72=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_72&gt;=Ith_72</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(72)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_73</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_73&gt;Ith_73</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_73)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_73&lt;Ith_73</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_73&lt;Ith_73</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C73=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_73&gt;=Ith_73</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(73)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_74</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_74&gt;Ith_74</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_74)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_74&lt;Ith_74</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_74&lt;Ith_74</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C74=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_74&gt;=Ith_74</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(74)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_75</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_75&gt;Ith_75</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_75)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_75&lt;Ith_75</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_75&lt;Ith_75</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C75=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_75&gt;=Ith_75</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(75)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_76</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_76&gt;Ith_76</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_76)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_76&lt;Ith_76</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_76&lt;Ith_76</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C76=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_76&gt;=Ith_76</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(76)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_77</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 63;
  int t1 = 120;
  int i2 = 150;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_77&gt;Ith_77</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_77)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_77&lt;Ith_77</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_77&lt;Ith_77</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C77=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_77&gt;=Ith_77</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(77)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_78</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_78&gt;Ith_78</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_78)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_78&lt;Ith_78</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_78&lt;Ith_78</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C78=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_78&gt;=Ith_78</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(78)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_79</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_79&gt;Ith_79</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_79)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_79&lt;Ith_79</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_79&lt;Ith_79</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C79=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_79&gt;=Ith_79</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(79)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_80</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_80&gt;Ith_80</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_80)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_80&lt;Ith_80</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_80&lt;Ith_80</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C80=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_80&gt;=Ith_80</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(80)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_81</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 25;
  int t1 = 30;
  int i2 = 95;
  int t2 = 2;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_81&gt;Ith_81</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_81)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_81&lt;Ith_81</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_81&lt;Ith_81</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C81=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_81&gt;=Ith_81</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(81)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_82</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 50;
  int t1 = 60;
  int i2 = 120;
  int t2 = 4;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_82&gt;Ith_82</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_82)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_82&lt;Ith_82</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_82&lt;Ith_82</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C82=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_82&gt;=Ith_82</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(82)</label>
    </transition>
</template>
<template>
  <name>Circuit_Breaker_83</name>
  <declaration>
  clock x;

  int t;
  int m = 3;
  int i1 = 75;
  int t1 = 120;
  int i2 = 150;
  int t2 = 6;
  void triptime(int I) {
   if(I&lt;i1){
    t = 9999;
   }
   else if(I&gt;=i1 &amp;&amp; I&lt;i2){
    t = (m*i1*m*i1*t1)/(I*I);
   }
   else if(I&gt;=i2){
    t = t2;
   }
  }
  </declaration>
  <location id="id4" x="-364" y="-68">
    <name x="-382" y="-102">Closed</name>
  </location>
  <location id="id5" x="-119" y="-200">
    <name x="-144" y="-234">Standby</name>
    <label kind="invariant" x="-127" y="-190">x&lt;=t</label>
  </location>
  <location id="id6" x="119" y="-68">
    <name x="109" y="-102">Open</name>
  </location>
  <init ref="id4"/>
    <transition>
      <source ref="id4"/>
      <target ref="id5"/>
      <label kind="guard">Irc_83&gt;Ith_83</label>
      <label kind="synchronisation">Faults?</label>
      <label kind="assignment">x=0,triptime(Irc_83)</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_83&lt;Ith_83</label>
      <label kind="synchronisation">Fault_cleared?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id4"/>
      <label kind="guard">Irc_83&lt;Ith_83</label>
      <label kind="synchronisation">Close?</label>
      <label kind="assignment"></label>
    </transition>
    <transition>
      <source ref="id6"/>
      <target ref="id4"/>
      <label kind="guard"></label>
      <label kind="synchronisation">Reset?</label>
      <label kind="assignment">clear(), C83=1</label>
    </transition>
    <transition>
      <source ref="id5"/>
      <target ref="id6"/>
      <label kind="guard">x==t &amp;&amp; Irc_83&gt;=Ith_83</label>
      <label kind="synchronisation">CBopen!</label>
      <label kind="assignment">update(83)</label>
    </transition>
</template>
<system>
FG = Fault_Generator();
CB1 = Circuit_Breaker_1();
CB2 = Circuit_Breaker_2();
CB3 = Circuit_Breaker_3();
CB5 = Circuit_Breaker_5();
CB6 = Circuit_Breaker_6();
CB8 = Circuit_Breaker_8();
CB9 = Circuit_Breaker_9();
CB10 = Circuit_Breaker_10();
CB11 = Circuit_Breaker_11();
CB12 = Circuit_Breaker_12();
CB13 = Circuit_Breaker_13();
CB14 = Circuit_Breaker_14();
CB15 = Circuit_Breaker_15();
CB16 = Circuit_Breaker_16();
CB17 = Circuit_Breaker_17();
CB18 = Circuit_Breaker_18();
CB19 = Circuit_Breaker_19();
CB20 = Circuit_Breaker_20();
CB21 = Circuit_Breaker_21();
CB22 = Circuit_Breaker_22();
CB23 = Circuit_Breaker_23();
CB24 = Circuit_Breaker_24();
CB25 = Circuit_Breaker_25();
CB26 = Circuit_Breaker_26();
CB27 = Circuit_Breaker_27();
CB28 = Circuit_Breaker_28();
CB29 = Circuit_Breaker_29();
CB30 = Circuit_Breaker_30();
CB31 = Circuit_Breaker_31();
CB32 = Circuit_Breaker_32();
CB33 = Circuit_Breaker_33();
CB34 = Circuit_Breaker_34();
CB35 = Circuit_Breaker_35();
CB36 = Circuit_Breaker_36();
CB37 = Circuit_Breaker_37();
CB38 = Circuit_Breaker_38();
CB39 = Circuit_Breaker_39();
CB40 = Circuit_Breaker_40();
CB41 = Circuit_Breaker_41();
CB42 = Circuit_Breaker_42();
CB43 = Circuit_Breaker_43();
CB44 = Circuit_Breaker_44();
CB45 = Circuit_Breaker_45();
CB46 = Circuit_Breaker_46();
CB47 = Circuit_Breaker_47();
CB48 = Circuit_Breaker_48();
CB49 = Circuit_Breaker_49();
CB50 = Circuit_Breaker_50();
CB51 = Circuit_Breaker_51();
CB52 = Circuit_Breaker_52();
CB53 = Circuit_Breaker_53();
CB54 = Circuit_Breaker_54();
CB55 = Circuit_Breaker_55();
CB56 = Circuit_Breaker_56();
CB57 = Circuit_Breaker_57();
CB58 = Circuit_Breaker_58();
CB59 = Circuit_Breaker_59();
CB60 = Circuit_Breaker_60();
CB61 = Circuit_Breaker_61();
CB62 = Circuit_Breaker_62();
CB63 = Circuit_Breaker_63();
CB64 = Circuit_Breaker_64();
CB65 = Circuit_Breaker_65();
CB66 = Circuit_Breaker_66();
CB67 = Circuit_Breaker_67();
CB68 = Circuit_Breaker_68();
CB69 = Circuit_Breaker_69();
CB70 = Circuit_Breaker_70();
CB71 = Circuit_Breaker_71();
CB72 = Circuit_Breaker_72();
CB73 = Circuit_Breaker_73();
CB74 = Circuit_Breaker_74();
CB75 = Circuit_Breaker_75();
CB76 = Circuit_Breaker_76();
CB77 = Circuit_Breaker_77();
CB78 = Circuit_Breaker_78();
CB79 = Circuit_Breaker_79();
CB80 = Circuit_Breaker_80();
CB81 = Circuit_Breaker_81();
CB82 = Circuit_Breaker_82();
CB83 = Circuit_Breaker_83();
system FG, CB1, CB2, CB3, CB5, CB6, CB8, CB9, CB10, CB11, CB12, CB13, CB14, CB15, CB16, CB17, CB18, CB19, CB20, CB21, CB22, CB23, CB24, CB25, CB26, CB27, CB28, CB29, CB30, CB31, CB32, CB33, CB34, CB35, CB36, CB37, CB38, CB39, CB40, CB41, CB42, CB43, CB44, CB45, CB46, CB47, CB48, CB49, CB50, CB51, CB52, CB53, CB54, CB55, CB56, CB57, CB58, CB59, CB60, CB61, CB62, CB63, CB64, CB65, CB66, CB67, CB68, CB69, CB70, CB71, CB72, CB73, CB74, CB75, CB76, CB77, CB78, CB79, CB80, CB81, CB82, CB83;
</system>
<queries>
  <query>
    <formula>E&lt;&gt;((!CB39.Open &amp;&amp; CB8.Open &amp;&amp; F39)||(!CB39.Open &amp;&amp; CB32.Open &amp;&amp; F39)||(!CB39.Open &amp;&amp; CB33.Open &amp;&amp; F39)||(!CB40.Open &amp;&amp; CB8.Open &amp;&amp; F40)||(!CB40.Open &amp;&amp; CB42.Open &amp;&amp; F40)||(!CB40.Open &amp;&amp; CB43.Open &amp;&amp; F40)||(!CB41.Open &amp;&amp; CB8.Open &amp;&amp; F41)||(!CB41.Open &amp;&amp; CB43.Open &amp;&amp; F41)||(!CB42.Open &amp;&amp; CB8.Open &amp;&amp; F42)||(!CB42.Open &amp;&amp; CB43.Open &amp;&amp; F42)||(!CB43.Open &amp;&amp; CB8.Open &amp;&amp; F43)||(!CB44.Open &amp;&amp; CB8.Open &amp;&amp; F44)||(!CB44.Open &amp;&amp; CB47.Open &amp;&amp; F44)||(!CB20.Open &amp;&amp; CB8.Open &amp;&amp; FB20)||(!CB20.Open &amp;&amp; CB22.Open &amp;&amp; FB20)||(!CB20.Open &amp;&amp; CB23.Open &amp;&amp; FB20)||(!CB25.Open &amp;&amp; CB8.Open &amp;&amp; FB25)||(!CB25.Open &amp;&amp; CB27.Open &amp;&amp; FB25))</formula>
    <comment></comment>
  </query>
</queries>
</nta>
